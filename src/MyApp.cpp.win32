#include <utility>

#include "AppGL/OpenGL/win32/Win32App.h"
#include "AppGL/shader/Shader.h"

class MyApp : public AppGL::Win32App
{
public:
        explicit MyApp(HINSTANCE hInstance, AppGL::AppOptions options)
                : AppGL::Win32App(hInstance, std::move(options)) {}

private:
        std::shared_ptr<ComputeShader> computeShader;

        float deltaTime = 0.0f;
        float lastFrame = 0.0f;
        float frames = 0.0f;

        int texBinding = 0;

        void onStart() override
        {
                // Init Shader with fragment and vertex code.
                const char computeCode[] = {
                #embed "../src/shadersource/compute.comp"
                , '\0' };

                const char vertCode[] = {
                #embed "../src/shadersource/vertex.vert"
                , '\0' };

                const char fragCode[] = {
                #embed "../src/shadersource/fragment.frag"
                , '\0' };

                computeShader = std::make_shared<ComputeShader>(computeCode, vertCode, fragCode);
                computeShader->localSizeX = 8;
                computeShader->localSizeY = 4;

                computeShader->addUniform("tex", texBinding);
                computeShader->addUniform("resolution", glm::vec2(0.0));
                computeShader->addUniform("time", 0.0f);
        }

        void onUpdate() override
        {
                float currentFrame = this->window.getTime();
                deltaTime = currentFrame - lastFrame;
                lastFrame = currentFrame;
                if (frames > 500) {
                        std::cout << "FPS: " << 1 / deltaTime << std::endl;
                        frames = 0;
                } else frames++;

                glm::ivec2 resolution = this->window.getResolution();

                computeShader->setUniform("tex", texBinding);
                computeShader->setUniform("resolution", (glm::vec2)resolution);
                computeShader->setUniform("time", currentFrame);

                // Draw
                computeShader->drawFullScreenQuad(resolution.x, resolution.y, texBinding);
        }

        void onDestroy() override {}
};

AppGL::Win32App* AppGL::InitApp(HINSTANCE hInstance)
{
        AppOptions options;
        options.width = 800;
        options.height = 600;
        options.title = "OpenGL template window!";
        
        options.GLAttributes = {
                {WGL_CONTEXT_MAJOR_VERSION_ARB, 3},
                {WGL_CONTEXT_MINOR_VERSION_ARB, 3},
                {WGL_CONTEXT_PROFILE_MASK_ARB,  WGL_CONTEXT_CORE_PROFILE_BIT_ARB},
        };
        options.pixelFormatAttributes = {
                {WGL_DRAW_TO_WINDOW_ARB,     GL_TRUE},
                {WGL_SUPPORT_OPENGL_ARB, GL_TRUE},
                {WGL_DOUBLE_BUFFER_ARB, GL_TRUE},
                {WGL_ACCELERATION_ARB, WGL_FULL_ACCELERATION_ARB},
                {WGL_PIXEL_TYPE_ARB, WGL_TYPE_RGBA_ARB},
                {WGL_COLOR_BITS_ARB, 32},
                {WGL_DEPTH_BITS_ARB, 24},
                {WGL_STENCIL_BITS_ARB, 8},
        };
        
        AppGL::Win32App* app = new MyApp(hInstance, options);
        return app;
}